{"ast":null,"code":"import \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.for-each\";\nimport \"core-js/modules/es.array.from\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.slice\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.number.constructor\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-own-property-descriptors\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nvar _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nimport React, { useState } from 'react';\nimport ModalHOC from '../../hoc/modalHOC';\nimport { addMovie, updateMovie } from '../../../redux/actions';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { store } from '../../../redux/store';\nimport { Button, MenuItem } from \"@material-ui/core\";\nimport TextField from '@material-ui/core/TextField';\nimport { withStyles } from '@material-ui/styles';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\nimport { styles, theme1 } from './styles-material-ui';\n\nvar EditMovieModal = function EditMovieModal(props) {\n  _s2();\n\n  var description = props.description,\n      classes = props.classes,\n      handleClick = props.handleClick;\n\n  var _useState = useState({\n    title: description.title,\n    release_date: description.release_date,\n    poster_path: description.poster_path,\n    genres: description.genres,\n    overview: description.overview,\n    runtime: description.runtime,\n    vote_average: description.vote_average\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValues = _useState2[0],\n      setValues = _useState2[1];\n\n  var handleAddMovie = function handleAddMovie(list) {\n    var values = _objectSpread(_objectSpread({}, list), {}, {\n      runtime: Number(list.runtime),\n      vote_average: Number(list.vote_average)\n    });\n\n    if (store.getState().homePage.movies.filter(function (movie) {\n      return movie.id === description.id;\n    }).length) {\n      store.dispatch(updateMovie(values, description.id));\n    } else {\n      store.dispatch(addMovie(values));\n    }\n\n    handleClick();\n  };\n\n  var validationSchema = Yup.object({\n    genres: Yup.array(Yup.string()).required('Genres field must have 1 option'),\n    overview: Yup.string().required('Overview is required'),\n    poster_path: Yup.string().url('Invalid url address').required('Image URL is required'),\n    release_date: Yup.string().required('Date is required'),\n    runtime: Yup.number().typeError('The average vote must be a number').required('Runtime is required').min(0, 'The runtime must be more or equal to 0').max(10000, 'The runtime must be less or equal to 10000'),\n    title: Yup.string().required('Title is required'),\n    vote_average: Yup.number().typeError('The average vote must be a number').required('The average vote is required').min(0, 'The average vote must be more or equal to 0').max(10, 'The average vote must be less or equal to 10')\n  });\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: inputValues,\n    validationSchema: validationSchema,\n    onSubmit: function onSubmit(values) {\n      return handleAddMovie(values);\n    }\n  }, function (_ref) {\n    var isSubmitting = _ref.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(\"h2\", null, \"Edit Movie\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_field\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"title\"\n    }, \"Title\"), /*#__PURE__*/React.createElement(Field, {\n      autoComplete: \"off\",\n      name: \"title\",\n      type: \"text\",\n      id: \"title\"\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"title\",\n      render: function render(msg) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"error_message\"\n        }, msg);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_field release_date\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"release_date\"\n    }, \"Release Date\"), /*#__PURE__*/React.createElement(Field, {\n      autoComplete: \"off\",\n      name: \"release_date\",\n      type: \"date\",\n      id: \"release_date\"\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"release_date\",\n      render: function render(msg) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"error_message\"\n        }, msg);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_field\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"poster_path\"\n    }, \"Image Url\"), /*#__PURE__*/React.createElement(Field, {\n      autoComplete: \"off\",\n      name: \"poster_path\",\n      type: \"text\",\n      id: \"poster_path\"\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"poster_path\",\n      render: function render(msg) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"error_message\"\n        }, msg);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_field\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"poster_path\"\n    }, \"Genres\"), /*#__PURE__*/React.createElement(MuiThemeProvider, {\n      theme: theme1\n    }, /*#__PURE__*/React.createElement(Field, {\n      InputProps: {\n        disableUnderline: true\n      },\n      SelectProps: {\n        multiple: true\n      },\n      select: true,\n      as: TextField,\n      name: \"genres\",\n      classes: {\n        root: classes.select\n      }\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Action'\n    }, \"Action\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Adventure'\n    }, \"Adventure\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Animation'\n    }, \"Animation\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Family'\n    }, \"Family\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Drama'\n    }, \"Drama\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Fantasy'\n    }, \"Fantasy\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Romance'\n    }, \"Romance\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: 'Science fiction'\n    }, \"Science Fiction'\")), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"genres\",\n      render: function render(msg) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"error_message\"\n        }, msg);\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_field\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"overview\"\n    }, \"Overview\"), /*#__PURE__*/React.createElement(Field, {\n      autoComplete: \"off\",\n      name: \"overview\",\n      type: \"text\",\n      id: \"overview\"\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"overview\",\n      render: function render(msg) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"error_message\"\n        }, msg);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_field\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"vote_average\"\n    }, \"Average Vote\"), /*#__PURE__*/React.createElement(Field, {\n      autoComplete: \"off\",\n      name: \"vote_average\",\n      type: \"text\",\n      id: \"vote_average\"\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"vote_average\",\n      render: function render(msg) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"error_message\"\n        }, msg);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_field\"\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"runtime\"\n    }, \"Runtime\"), /*#__PURE__*/React.createElement(Field, {\n      autoComplete: \"off\",\n      name: \"runtime\",\n      type: \"text\",\n      id: \"runtime\"\n    }), /*#__PURE__*/React.createElement(ErrorMessage, {\n      name: \"runtime\",\n      render: function render(msg) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"error_message\"\n        }, msg);\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"modal_buttons_container\"\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button button_reverse\",\n      onClick: handleClick\n    }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n      classes: {\n        root: classes.button\n      },\n      type: \"submit\",\n      disabled: isSubmitting\n    }, \"Submit\")));\n  });\n};\n\n_s2(EditMovieModal, \"tNBqutpCu300b01/pmLR9RlKX2w=\");\n\n_c = EditMovieModal;\nexport default ModalHOC(withStyles(styles)(EditMovieModal));\n\nvar _c;\n\n$RefreshReg$(_c, \"EditMovieModal\");","map":{"version":3,"sources":["C:/Users/Siarhei_Ivaneichyk/Desktop/reactMentoring/reactApplication/src/components/movieList/editMovieModal/editMovieModal.jsx"],"names":["React","useState","ModalHOC","addMovie","updateMovie","Formik","Form","Field","ErrorMessage","Yup","store","Button","MenuItem","TextField","withStyles","MuiThemeProvider","styles","theme1","EditMovieModal","props","description","classes","handleClick","title","release_date","poster_path","genres","overview","runtime","vote_average","inputValues","setValues","handleAddMovie","list","values","Number","getState","homePage","movies","filter","movie","id","length","dispatch","validationSchema","object","array","string","required","url","number","typeError","min","max","isSubmitting","msg","disableUnderline","multiple","root","select","button"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport ModalHOC from '../../hoc/modalHOC';\r\nimport { addMovie, updateMovie } from '../../../redux/actions';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { store } from '../../../redux/store';\r\nimport { Button, MenuItem } from \"@material-ui/core\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { styles, theme1 } from './styles-material-ui';\r\n\r\nconst EditMovieModal = (props) => {\r\n    const { description, classes, handleClick } = props;\r\n    const [inputValues, setValues] = useState(\r\n        {\r\n            title: description.title,\r\n            release_date: description.release_date,\r\n            poster_path: description.poster_path,\r\n            genres: description.genres,\r\n            overview: description.overview,\r\n            runtime: description.runtime,\r\n            vote_average: description.vote_average,\r\n        }\r\n    );\r\n\r\n    const handleAddMovie = (list) => {\r\n        const values = { ...list, runtime: Number(list.runtime), vote_average: Number(list.vote_average) };\r\n        if (store.getState().homePage.movies.filter((movie) => movie.id === description.id).length) {\r\n            store.dispatch(updateMovie(values, description.id));\r\n        } else {\r\n            store.dispatch(addMovie(values));\r\n        }\r\n        handleClick();\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        genres: Yup.array(Yup.string()).required('Genres field must have 1 option'),\r\n        overview: Yup.string().required('Overview is required'),\r\n        poster_path: Yup.string().url('Invalid url address').required('Image URL is required'),\r\n        release_date: Yup.string().required('Date is required'),\r\n        runtime: Yup.number().typeError('The average vote must be a number').required('Runtime is required')\r\n            .min(0, 'The runtime must be more or equal to 0').max(10000, 'The runtime must be less or equal to 10000'),\r\n        title: Yup.string().required('Title is required'),\r\n        vote_average: Yup.number().typeError('The average vote must be a number').required('The average vote is required')\r\n            .min(0, 'The average vote must be more or equal to 0').max(10, 'The average vote must be less or equal to 10'),\r\n    });\r\n\r\n    return <Formik initialValues={inputValues} validationSchema={validationSchema} onSubmit={(values) => handleAddMovie(values)}>\r\n        {\r\n            ({ isSubmitting }) => {\r\n                return <Form>\r\n                    <h2>Edit Movie</h2>\r\n                    <div className=\"modal_field\">\r\n                        <label htmlFor=\"title\">Title</label>\r\n                        <Field\r\n                            autoComplete=\"off\"\r\n                            name=\"title\"\r\n                            type=\"text\"\r\n                            id=\"title\"\r\n                        />\r\n                        <ErrorMessage name=\"title\" render={msg => <div className=\"error_message\" >{msg}</div>} />\r\n                    </div>\r\n                    <div className=\"modal_field release_date\">\r\n                        <label htmlFor=\"release_date\">Release Date</label>\r\n                        <Field\r\n                            autoComplete=\"off\"\r\n                            name=\"release_date\"\r\n                            type=\"date\"\r\n                            id=\"release_date\"\r\n                        />\r\n                        <ErrorMessage name=\"release_date\" render={msg => <div className=\"error_message\" >{msg}</div>} />\r\n                    </div>\r\n                    <div className=\"modal_field\">\r\n                        <label htmlFor=\"poster_path\">Image Url</label>\r\n                        <Field\r\n                            autoComplete=\"off\"\r\n                            name=\"poster_path\"\r\n                            type=\"text\"\r\n                            id=\"poster_path\"\r\n                        />\r\n                        <ErrorMessage name=\"poster_path\" render={msg => <div className=\"error_message\" >{msg}</div>} />\r\n                    </div>\r\n                    <div className=\"modal_field\">\r\n                        <label htmlFor=\"poster_path\">Genres</label>\r\n                        <MuiThemeProvider theme={theme1}>\r\n                            <Field\r\n                                InputProps={{ disableUnderline: true }}\r\n                                SelectProps={{ multiple: true }}\r\n                                select\r\n                                as={TextField}\r\n                                name=\"genres\"\r\n                                classes={{ root: classes.select }}\r\n                            >\r\n                                <MenuItem value={'Action'}>Action</MenuItem>\r\n                                <MenuItem value={'Adventure'}>Adventure</MenuItem>\r\n                                <MenuItem value={'Animation'}>Animation</MenuItem>\r\n                                <MenuItem value={'Family'}>Family</MenuItem>\r\n                                <MenuItem value={'Drama'}>Drama</MenuItem>\r\n                                <MenuItem value={'Fantasy'}>Fantasy</MenuItem>\r\n                                <MenuItem value={'Romance'}>Romance</MenuItem>\r\n                                <MenuItem value={'Science fiction'}>Science Fiction'</MenuItem>\r\n                            </Field>\r\n                            <ErrorMessage name=\"genres\" render={msg => <div className=\"error_message\" >{msg}</div>} />\r\n                        </MuiThemeProvider>\r\n                    </div>\r\n                    <div className=\"modal_field\">\r\n                        <label htmlFor=\"overview\">Overview</label>\r\n                        <Field\r\n                            autoComplete=\"off\"\r\n                            name=\"overview\"\r\n                            type=\"text\"\r\n                            id=\"overview\"\r\n                        />\r\n                        <ErrorMessage name=\"overview\" render={msg => <div className=\"error_message\" >{msg}</div>} />\r\n                    </div>\r\n                    <div className=\"modal_field\">\r\n                        <label htmlFor=\"vote_average\">Average Vote</label>\r\n                        <Field\r\n                            autoComplete=\"off\"\r\n                            name=\"vote_average\"\r\n                            type=\"text\"\r\n                            id=\"vote_average\"\r\n                        />\r\n                        <ErrorMessage name=\"vote_average\" render={msg => <div className=\"error_message\" >{msg}</div>} />\r\n                    </div>\r\n                    <div className=\"modal_field\">\r\n                        <label htmlFor=\"runtime\">Runtime</label>\r\n                        <Field\r\n                            autoComplete=\"off\"\r\n                            name=\"runtime\"\r\n                            type=\"text\"\r\n                            id=\"runtime\"\r\n                        />\r\n                        <ErrorMessage name=\"runtime\" render={msg => <div className=\"error_message\" >{msg}</div>} />\r\n                    </div>\r\n                    <div className=\"modal_buttons_container\">\r\n                        <button className=\"button button_reverse\" onClick={handleClick}>Reset</button>\r\n                        <Button\r\n                            classes={{ root: classes.button }}\r\n                            type=\"submit\"\r\n                            disabled={isSubmitting}\r\n                        >\r\n                            Submit\r\n                        </Button>\r\n                    </div>\r\n                </Form>\r\n            }\r\n        }\r\n    </Formik>\r\n}\r\n\r\nexport default ModalHOC(withStyles(styles)(EditMovieModal));"]},"metadata":{},"sourceType":"module"}